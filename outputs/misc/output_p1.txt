Running solver...
Choice set:dom2 ([1,2])
Choice set:dom1 ([2,3])
----------
Solving 3 vars:
	universe ([1,3])
	dom2 ([1,2])
	dom1 ([2,3])
Choice constraints:
	Position 2: dom2 ([1,2])
	Position 3: dom1 ([2,3])
Count constraints:
----------
Counting permutations:
Splitting injectivity...
	Split class: universe ([1,3])
	Computing case combinations of rest classes...
	Case (1, 0, 0)
	Case universe ([1,3]) are ['Nr. dom2 ∧ dom1 ([2]) == 1', 'Nr. ¬(dom1) ([1,2)) == 0', 'Nr. ¬(dom2) ((2,3]) == 0']:
		Subproblem:
		----------
		Solving 1 vars:
			universe ([1,3])
		Choice constraints:
		Count constraints:
			Nr. dom2 ∧ dom1 ([2]) == 1
			Nr. ¬(dom1) ([1,2)) == 0
			Nr. ¬(dom2) ((2,3]) == 0
		----------
		Counting exchangeable...
		Propagating Nr. dom2 ∧ dom1 ([2]) == 1
			1 exchangeable free vars: universe ([1,3])
			Splitting on other constraints...
				Subproblem:
				----------
				Solving 1 vars:
					dom2 ∧ dom1 ([2])
				Choice constraints:
				Count constraints:
					Nr. ¬(dom1) ([1,2)) == 0
					Nr. ¬(dom2) ((2,3]) == 0
				----------
				Counting exchangeable...
				Propagating Nr. ¬(dom1) ([1,2)) == 0
					Nr. ¬(dom1) ([1,2)) == 0 already satisfied
					Splitting on other constraints...
						Subproblem:
						----------
						Solving 1 vars:
							dom2 ∧ dom1 ([2])
						Choice constraints:
						Count constraints:
							Nr. ¬(dom2) ((2,3]) == 0
						----------
						Counting exchangeable...
						Propagating Nr. ¬(dom2) ((2,3]) == 0
							Nr. ¬(dom2) ((2,3]) == 0 already satisfied
							Splitting on other constraints...
							... no other constraints
							Counting permutations:
							Falling factorial: 1
							Counting domains: 1
						=========
						tot:1
				=========
				tot:1
		=========
		tot:1
	Filtering domains...
	  Case dom2 ∧ dom1 ([2])
	  Filtering 1 dom2 ∧ dom1 ([2]) out of dom2 ([1,2]):
	  Filtering 1 dom2 ∧ dom1 ([2]) out of dom1 ([2,3]):
	  Case ¬(dom1) ([1,2))
	  Case ¬(dom2) ((2,3])
		Subproblem:
		----------
		Solving 2 vars:
			dom2 ∧ ¬(dom2 ∧ dom1) ([1,2))
			dom1 ∧ ¬(dom2 ∧ dom1) ((2,3])
		Choice constraints:
		Count constraints:
		----------
		Counting permutations:
		Splitting injectivity...
			Split class: dom2 ∧ ¬(dom2 ∧ dom1) ([1,2))
			Computing case combinations of rest classes...
			Case (1, 0)
			Case dom2 ∧ ¬(dom2 ∧ dom1) ([1,2)) are ['Nr. ¬(dom1 ∧ ¬(dom2 ∧ dom1)) ([1,2]) == 1', 'Nr. dom1 ∧ ¬(dom2 ∧ dom1) ((2,3]) == 0']:
				Subproblem:
				----------
				Solving 1 vars:
					dom2 ∧ ¬(dom2 ∧ dom1) ([1,2))
				Choice constraints:
				Count constraints:
					Nr. ¬(dom1 ∧ ¬(dom2 ∧ dom1)) ([1,2]) == 1
					Nr. dom1 ∧ ¬(dom2 ∧ dom1) ((2,3]) == 0
				----------
				Counting exchangeable...
				Propagating Nr. ¬(dom1 ∧ ¬(dom2 ∧ dom1)) ([1,2]) == 1
					Nr. ¬(dom1 ∧ ¬(dom2 ∧ dom1)) ([1,2]) == 1 already satisfied
					Splitting on other constraints...
						Subproblem:
						----------
						Solving 1 vars:
							dom2 ∧ ¬(dom2 ∧ dom1) ([1,2))
						Choice constraints:
						Count constraints:
							Nr. dom1 ∧ ¬(dom2 ∧ dom1) ((2,3]) == 0
						----------
						Counting exchangeable...
						Propagating Nr. dom1 ∧ ¬(dom2 ∧ dom1) ((2,3]) == 0
							Nr. dom1 ∧ ¬(dom2 ∧ dom1) ((2,3]) == 0 already satisfied
							Splitting on other constraints...
							... no other constraints
							Counting permutations:
							Falling factorial: 1
							Counting domains: 1
						=========
						tot:1
				=========
				tot:1
			Filtering domains...
			  Case ¬(dom1 ∧ ¬(dom2 ∧ dom1)) ([1,2])
			  Filtering 1 ¬(dom1 ∧ ¬(dom2 ∧ dom1)) ([1,2]) out of dom1 ∧ ¬(dom2 ∧ dom1) ((2,3]):
			  Case dom1 ∧ ¬(dom2 ∧ dom1) ((2,3])
				Subproblem:
				----------
				Solving 1 vars:
					dom1 ∧ ¬(dom2 ∧ dom1) ((2,3])
				Choice constraints:
				Count constraints:
				----------
				Counting permutations:
				Falling factorial: 1
				Counting domains: 1
				=========
				tot:1
			Split result = 1
			Case (0, 1)
			Case dom2 ∧ ¬(dom2 ∧ dom1) ([1,2)) are ['Nr. ¬(dom1 ∧ ¬(dom2 ∧ dom1)) ([1,2]) == 0', 'Nr. dom1 ∧ ¬(dom2 ∧ dom1) ((2,3]) == 1']:
				Subproblem:
				----------
				Solving 1 vars:
					dom2 ∧ ¬(dom2 ∧ dom1) ([1,2))
				Choice constraints:
				Count constraints:
					Nr. ¬(dom1 ∧ ¬(dom2 ∧ dom1)) ([1,2]) == 0
					Nr. dom1 ∧ ¬(dom2 ∧ dom1) ((2,3]) == 1
				----------
				Counting exchangeable...
				Propagating Nr. ¬(dom1 ∧ ¬(dom2 ∧ dom1)) ([1,2]) == 0
					Nr. ¬(dom1 ∧ ¬(dom2 ∧ dom1)) ([1,2]) == 0 is unsat here
				==========
				Unsat: 0
		Counting domains: 1
		=========
		tot:1
	Split result = 1
	Case (0, 0, 1)
	Case universe ([1,3]) are ['Nr. dom2 ∧ dom1 ([2]) == 0', 'Nr. ¬(dom1) ([1,2)) == 0', 'Nr. ¬(dom2) ((2,3]) == 1']:
		Subproblem:
		----------
		Solving 1 vars:
			universe ([1,3])
		Choice constraints:
		Count constraints:
			Nr. dom2 ∧ dom1 ([2]) == 0
			Nr. ¬(dom1) ([1,2)) == 0
			Nr. ¬(dom2) ((2,3]) == 1
		----------
		Counting exchangeable...
		Propagating Nr. dom2 ∧ dom1 ([2]) == 0
			1 exchangeable free vars: universe ([1,3])
			Splitting on other constraints...
				Subproblem:
				----------
				Solving 1 vars:
					¬(dom2 ∧ dom1) ([1,2) | (2,3])
				Choice constraints:
				Count constraints:
					Nr. ¬(dom1) ([1,2)) == 0
					Nr. ¬(dom2) ((2,3]) == 1
				----------
				Counting exchangeable...
				Propagating Nr. ¬(dom1) ([1,2)) == 0
					1 exchangeable free vars: ¬(dom2 ∧ dom1) ([1,2) | (2,3])
					Splitting on other constraints...
						Subproblem:
						----------
						Solving 1 vars:
							¬(dom2 ∧ dom1) ∧ dom1 ((2,3])
						Choice constraints:
						Count constraints:
							Nr. ¬(dom2) ((2,3]) == 1
						----------
						Counting exchangeable...
						Propagating Nr. ¬(dom2) ((2,3]) == 1
							Nr. ¬(dom2) ((2,3]) == 1 already satisfied
							Splitting on other constraints...
							... no other constraints
							Counting permutations:
							Falling factorial: 1
							Counting domains: 1
						=========
						tot:1
				=========
				tot:1
		=========
		tot:1
	Filtering domains...
	  Case dom2 ∧ dom1 ([2])
	  Case ¬(dom1) ([1,2))
	  Case ¬(dom2) ((2,3])
	  Filtering 1 ¬(dom2) ((2,3]) out of dom2 ([1,2]):
	  Filtering 1 ¬(dom2) ((2,3]) out of dom1 ([2,3]):
		Subproblem:
		----------
		Solving 2 vars:
			dom2 ([1,2])
			dom1 ∧ ¬(¬(dom2)) ([2,3))
		Choice constraints:
		Count constraints:
		----------
		Counting permutations:
		Splitting injectivity...
			Split class: dom2 ([1,2])
			Computing case combinations of rest classes...
			Case (1, 0)
			Case dom2 ([1,2]) are ['Nr. ¬(dom1 ∧ ¬(¬(dom2))) ([1,2) | [3]) == 1', 'Nr. dom1 ∧ ¬(¬(dom2)) ([2,3)) == 0']:
				Subproblem:
				----------
				Solving 1 vars:
					dom2 ([1,2])
				Choice constraints:
				Count constraints:
					Nr. ¬(dom1 ∧ ¬(¬(dom2))) ([1,2) | [3]) == 1
					Nr. dom1 ∧ ¬(¬(dom2)) ([2,3)) == 0
				----------
				Counting exchangeable...
				Propagating Nr. ¬(dom1 ∧ ¬(¬(dom2))) ([1,2) | [3]) == 1
					1 exchangeable free vars: dom2 ([1,2])
					Splitting on other constraints...
						Subproblem:
						----------
						Solving 1 vars:
							dom2 ∧ ¬(dom1 ∧ ¬(¬(dom2))) ([1,2))
						Choice constraints:
						Count constraints:
							Nr. dom1 ∧ ¬(¬(dom2)) ([2,3)) == 0
						----------
						Counting exchangeable...
						Propagating Nr. dom1 ∧ ¬(¬(dom2)) ([2,3)) == 0
							Nr. dom1 ∧ ¬(¬(dom2)) ([2,3)) == 0 already satisfied
							Splitting on other constraints...
							... no other constraints
							Counting permutations:
							Falling factorial: 1
							Counting domains: 1
						=========
						tot:1
				=========
				tot:1
			Filtering domains...
			  Case ¬(dom1 ∧ ¬(¬(dom2))) ([1,2) | [3])
			  Filtering 1 ¬(dom1 ∧ ¬(¬(dom2))) ([1,2) | [3]) out of dom1 ∧ ¬(¬(dom2)) ([2,3)):
			  Case dom1 ∧ ¬(¬(dom2)) ([2,3))
				Subproblem:
				----------
				Solving 1 vars:
					dom1 ∧ ¬(¬(dom2)) ([2,3))
				Choice constraints:
				Count constraints:
				----------
				Counting permutations:
				Falling factorial: 1
				Counting domains: 1
				=========
				tot:1
			Split result = 1
			Case (0, 1)
			Case dom2 ([1,2]) are ['Nr. ¬(dom1 ∧ ¬(¬(dom2))) ([1,2) | [3]) == 0', 'Nr. dom1 ∧ ¬(¬(dom2)) ([2,3)) == 1']:
				Subproblem:
				----------
				Solving 1 vars:
					dom2 ([1,2])
				Choice constraints:
				Count constraints:
					Nr. ¬(dom1 ∧ ¬(¬(dom2))) ([1,2) | [3]) == 0
					Nr. dom1 ∧ ¬(¬(dom2)) ([2,3)) == 1
				----------
				Counting exchangeable...
				Propagating Nr. ¬(dom1 ∧ ¬(¬(dom2))) ([1,2) | [3]) == 0
					1 exchangeable free vars: dom2 ([1,2])
					Splitting on other constraints...
						Subproblem:
						----------
						Solving 1 vars:
							dom2 ∧ dom1 ∧ ¬(¬(dom2)) ([2])
						Choice constraints:
						Count constraints:
							Nr. dom1 ∧ ¬(¬(dom2)) ([2,3)) == 1
						----------
						Counting exchangeable...
						Propagating Nr. dom1 ∧ ¬(¬(dom2)) ([2,3)) == 1
							Nr. dom1 ∧ ¬(¬(dom2)) ([2,3)) == 1 already satisfied
							Splitting on other constraints...
							... no other constraints
							Counting permutations:
							Falling factorial: 1
							Counting domains: 1
						=========
						tot:1
				=========
				tot:1
			Filtering domains...
			  Case ¬(dom1 ∧ ¬(¬(dom2))) ([1,2) | [3])
			  Case dom1 ∧ ¬(¬(dom2)) ([2,3))
			  Filtering 1 dom1 ∧ ¬(¬(dom2)) ([2,3)) out of dom1 ∧ ¬(¬(dom2)) ([2,3)):
				Subproblem:
				----------
				Solving 1 vars:
					dom1 ∧ ¬(¬(dom2)) ∧ ¬(dom1 ∧ ¬(¬(dom2))) ((2,3))
				Choice constraints:
				Count constraints:
				----------
				Counting permutations:
				1 different vars for 0 values!
				Counting domains: 0
				=========
				tot:0
			Split result = 0
		Counting domains: 1
		=========
		tot:1
	Split result = 1
	Case (0, 1, 0)
	Case universe ([1,3]) are ['Nr. dom2 ∧ dom1 ([2]) == 0', 'Nr. ¬(dom1) ([1,2)) == 1', 'Nr. ¬(dom2) ((2,3]) == 0']:
		Subproblem:
		----------
		Solving 1 vars:
			universe ([1,3])
		Choice constraints:
		Count constraints:
			Nr. dom2 ∧ dom1 ([2]) == 0
			Nr. ¬(dom1) ([1,2)) == 1
			Nr. ¬(dom2) ((2,3]) == 0
		----------
		Counting exchangeable...
		Propagating Nr. dom2 ∧ dom1 ([2]) == 0
			1 exchangeable free vars: universe ([1,3])
			Splitting on other constraints...
				Subproblem:
				----------
				Solving 1 vars:
					¬(dom2 ∧ dom1) ([1,2) | (2,3])
				Choice constraints:
				Count constraints:
					Nr. ¬(dom1) ([1,2)) == 1
					Nr. ¬(dom2) ((2,3]) == 0
				----------
				Counting exchangeable...
				Propagating Nr. ¬(dom1) ([1,2)) == 1
					1 exchangeable free vars: ¬(dom2 ∧ dom1) ([1,2) | (2,3])
					Splitting on other constraints...
						Subproblem:
						----------
						Solving 1 vars:
							¬(dom1) ([1,2))
						Choice constraints:
						Count constraints:
							Nr. ¬(dom2) ((2,3]) == 0
						----------
						Counting exchangeable...
						Propagating Nr. ¬(dom2) ((2,3]) == 0
							Nr. ¬(dom2) ((2,3]) == 0 already satisfied
							Splitting on other constraints...
							... no other constraints
							Counting permutations:
							Falling factorial: 1
							Counting domains: 1
						=========
						tot:1
				=========
				tot:1
		=========
		tot:1
	Filtering domains...
	  Case dom2 ∧ dom1 ([2])
	  Case ¬(dom1) ([1,2))
	  Filtering 1 ¬(dom1) ([1,2)) out of dom2 ([1,2]):
	  Filtering 1 ¬(dom1) ([1,2)) out of dom1 ([2,3]):
	  Case ¬(dom2) ((2,3])
		Subproblem:
		----------
		Solving 2 vars:
			dom2 ∧ ¬(¬(dom1)) ((1,2])
			dom1 ([2,3])
		Choice constraints:
		Count constraints:
		----------
		Counting permutations:
		Splitting injectivity...
			Split class: dom2 ∧ ¬(¬(dom1)) ((1,2])
			Computing case combinations of rest classes...
			Case (1, 0)
			Case dom2 ∧ ¬(¬(dom1)) ((1,2]) are ['Nr. ¬(dom1) ([1,2)) == 1', 'Nr. dom1 ([2,3]) == 0']:
				Subproblem:
				----------
				Solving 1 vars:
					dom2 ∧ ¬(¬(dom1)) ((1,2])
				Choice constraints:
				Count constraints:
					Nr. ¬(dom1) ([1,2)) == 1
					Nr. dom1 ([2,3]) == 0
				----------
				Counting exchangeable...
				Propagating Nr. ¬(dom1) ([1,2)) == 1
					1 exchangeable free vars: dom2 ∧ ¬(¬(dom1)) ((1,2])
					Splitting on other constraints...
						Subproblem:
						----------
						Solving 1 vars:
							dom2 ∧ ¬(¬(dom1)) ∧ ¬(dom1) ((1,2))
						Choice constraints:
						Count constraints:
							Nr. dom1 ([2,3]) == 0
						----------
						Counting exchangeable...
						Propagating Nr. dom1 ([2,3]) == 0
							Nr. dom1 ([2,3]) == 0 already satisfied
							Splitting on other constraints...
							... no other constraints
							Counting permutations:
							1 different vars for 0 values!
							Counting domains: 0
						=========
						tot:0
				=========
				tot:0
			Case (0, 1)
			Case dom2 ∧ ¬(¬(dom1)) ((1,2]) are ['Nr. ¬(dom1) ([1,2)) == 0', 'Nr. dom1 ([2,3]) == 1']:
				Subproblem:
				----------
				Solving 1 vars:
					dom2 ∧ ¬(¬(dom1)) ((1,2])
				Choice constraints:
				Count constraints:
					Nr. ¬(dom1) ([1,2)) == 0
					Nr. dom1 ([2,3]) == 1
				----------
				Counting exchangeable...
				Propagating Nr. ¬(dom1) ([1,2)) == 0
					1 exchangeable free vars: dom2 ∧ ¬(¬(dom1)) ((1,2])
					Splitting on other constraints...
						Subproblem:
						----------
						Solving 1 vars:
							dom2 ∧ ¬(¬(dom1)) ∧ dom1 ([2])
						Choice constraints:
						Count constraints:
							Nr. dom1 ([2,3]) == 1
						----------
						Counting exchangeable...
						Propagating Nr. dom1 ([2,3]) == 1
							Nr. dom1 ([2,3]) == 1 already satisfied
							Splitting on other constraints...
							... no other constraints
							Counting permutations:
							Falling factorial: 1
							Counting domains: 1
						=========
						tot:1
				=========
				tot:1
			Filtering domains...
			  Case ¬(dom1) ([1,2))
			  Case dom1 ([2,3])
			  Filtering 1 dom1 ([2,3]) out of dom1 ([2,3]):
				Subproblem:
				----------
				Solving 1 vars:
					dom1 ∧ ¬(dom1) ((2,3])
				Choice constraints:
				Count constraints:
				----------
				Counting permutations:
				Falling factorial: 1
				Counting domains: 1
				=========
				tot:1
			Split result = 1
		Counting domains: 1
		=========
		tot:1
	Split result = 1
Counting domains: 3
=========
tot:3
